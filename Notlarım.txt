C:\Users\nurullah.yigit.NY\Desktop>django-admin startproject blog ile bu klasör ve dosyalar otomatik olarak oluşturuldu..
masaüstüne klasör (blog) ve alt dosyaları otomatik yükleniyor
örn. __init__.py dosyası otomatik oluşur ve py uygulaması anlamına geliyor.
python manage.py runserver ... Django da web sunucusu çalışır.
örn. settingste language bölümünde tr, en yazılırsa admin ana ekranı dili değişir..
DEBUG=TRUE gerçek bir web server a atılırsa FALSE yapılmalıdır.
Time zone değişiritilmeli... 'Europe/Istanbul'
Django da admin uygulaması gibi birçok hazır modül geliyor.
settings.py de install bölümü bu hazır app leri gösteriyor. bu bölüme daha sonra yazdığımız uygulamaları buraya söylememiz gerekiyor.
app lerin içinde tablolar olabilir. bunu SQL e söylemek için python manage.py migrate diyerek tabloları sqlite da oluşmasını sağlarız..(yenibir terminal açılabilir)
migrate den sonra admin paneli oluşunca..web sitesi pgelecektir.
user oluşturmak için.. yani ilk admin girişi için... python.manage.py createsuperuser
apps lere ayırmak projeleri yönetmeyi kolaylaştırıyor. başka projelere de yazdığımız uygulamaları ekleyebiliriz. Bize esnekli sağlıyor.
örn. web sitesinde forum varsa, ayrı bir app yazılabilir.
bir uygulama oluşturacaksak... "python manage.py startapp article" tablo ve viewlar burada olacak ve otomatik dosyalar oluşuyor.
migrations dosyası... SQL sorgularıın yazıldığı yer..
models.py içine uygulamaya özel tablolarımızı class olarak yazıp, admin panelinde göstermek istiyorsak.. admin'e kayt etmek gerekiyor.
test ise, test için kullanılıyor.
apps.py appimizin adı tutuluyor
view ise, url adının olduğu yer.. url map ine göre fonkisyonlarımızın barındığı alan.
article oluşturduk.. models.py içine tablo oluşturmamız gerek.. örn. class (örn) Article (models classından Model diye bir isim verdik)
article oluşturunca, admin e kayıt etmek gerekiyor.. Böylece admin paneline de fonksiyon yazasark kayıt ediyoruz.
article diye bir uygulama oluşturduk ama Django ya söylemedik.. blog/setting içine app bölümüne yazıyoruz.
veri tabanında oluşturmamız gerekiyor.. yani article app mizin sql sorgusuna dönüşeceğini djangoda yapmamızgerek.. her bir yeni model yazdığımızda migrate etmek gerekiyor. böylece sql sorgusuna benzer bir sorgu otomatik oluşacak.
python manage.py makemigrations >> 0001.initials.py diye oluşturuyor. ve tablolar sql de oluşması için otomatik sorgular oluşuyor. yani migrate için ön hazırlık yapılıyor. uzun uzun sql sorgusu yazılmasına gerek kalmıyor django bunu hallediyor.
python manage.py migrate ile SQLite da tablolar oluştu..

ModelAdmin Class ından code yazarak Admin.py de.. ek Article özellikleri ekelyebiliriz. Örn. search vs

python manage.py shell ile sql ORM sorguları yapılabilir.. django nun içinden hazır uygulamaları alabiliriz. Aynısı INSTALLED apps de var.
from django.contrib.auth.models import user
from article.models import Article
user, Article yazarak modülleri görebiliriz.. Obleler oluşturup, database e yazdırabiliriz.
newuser=User(username="denemekullanici",password="123" diyerek kullanıcı oluşturulabilir
newUser.save() diyerek veri tabanına kayıt edebiliriz.

newUser2=User(username="denemekullanici2")
newUser2.set_password("123") database e şifreleyerek kayıt eder.
newUser2.save()

URL yapıları için djanga "templates" e gidip bakacak.. setting in altındadır.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],

Anasayfamızı göstermek için.. 
blog > urls.py de path yazacağız.. '' şeklinde boş yazarsal locakhost 8000 ana sayafada görünürüz.
sonra article içinde views a gidip.. sayfa gelmesi için bir def fonksiyonu yazmamız gerekiyor.

python manage.py startapp user (projemizde, "user" uygulaması oluşturduk.)



python da model de değişiklik yapılırsa, models.py de bir class da model eklenirse.. Djangoya modelin değiştiğini söylemek gerek.
.. yani python manage.py makemigrations yazarak, bir dosya otomatik oluşturuluyor.
.. python manage.py migrate yazarak da veritabanında oluşturuyoruz.sqlite dan bakılabilir.